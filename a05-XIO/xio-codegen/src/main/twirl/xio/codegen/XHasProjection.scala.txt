@(maxItem: Int)

package xio

trait XHasAlias {

    type XHas0 = nat.has.NatZero
    type XHas1[T1] = nat.has.NatPositive[nat.has.NatZero, T1]
    @for(i <- 2 to maxItem) {
        type XHas@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }] = nat.has.NatPositive[XHas@{i - 1}[@for(ii <- 1 to i - 1) { @if(ii > 1) { , } T@{ii} }], T@{i}]
    }
    val XHas0: XHas0 = nat.has.NatZero
    def XHas1[T1](t1: T1): XHas1[T1] = new nat.has.NatPositive(nat.has.NatZero, t1)
    @for(i <- 2 to maxItem) {
        def XHas@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }](@for(ii <- 1 to i) { @if(ii > 1) { , } _@{ii}: T@{ii} }): XHas@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }] = new nat.has.NatPositive(tail = XHas@{i - 1}(@for(ii <- 1 to i - 1) { @if(ii > 1) { , } _@{ii} }) , head = _@{i})
    }
    implicit class XHasTuple1ImplicitClass[T1](private val has: XHas1[T1]) {
        def _1: T1 = has.head
        def replace_1[T](i: T): XHas1[T] = XHas1(i)
    }
    @for(i <- 2 to maxItem) {
        implicit class XHasTuple@{i}ImplicitClass[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }](private val has: XHas@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }]) {
            @for(ii <- 1 to i - 1) {
                def _@{ii}: T@{ii} = has.tail._@{ii}
            }
            def _@{i}: T@{i} = has.head
            @for(ii <- 1 to i - 1) {
                def replace_@{ii}[T](i: T): XHas@{i}[@for(iii <- 1 to i) { @if(iii > 1) { , } @if(ii == iii) { T } else { T@{iii} } }] = new xio.nat.has.NatPositive(has.tail.replace_@{ii}(i), has.head)
            }
            def replace_@{i}[T](i: T): XHas@{i}[@for(ii <- 1 to i - 1) { T@{ii} , } T] = new xio.nat.has.NatPositive(has.tail, i)
        }

        @*object XHasTuple@{i} {
            def fromTuple[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }](i: (@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} })):
            XHasTuple@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }] =
            XHasTuple@{i}(@for(ii <- 1 to i) { @if(ii > 1) { , } _@{ii} = i._@{ii} })
        }

        object XHasToTuple@{i} {
            def apply[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }](n: XHas@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }]): XHasTuple@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }] =
                XHasTuple@{i}(@for(ii <- 1 to i) { @if(ii > 1) { , } _@{ii} = n @for(iii <- 1 to i - ii) { .tail } .head })
        }*@
    }

}
