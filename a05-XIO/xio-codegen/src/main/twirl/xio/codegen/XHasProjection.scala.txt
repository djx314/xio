@(maxItem: Int)

package xio

trait XHasAlias {

    type XHas0 = nat.has.NatZero
    type XHas1[T1] = nat.has.NatPositive[nat.has.NatZero, T1]
    @for(i <- 2 to maxItem) {
        type XHas@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }] = nat.has.NatPositive[XHas@{i - 1}[@for(ii <- 1 to i - 1) { @if(ii > 1) { , } T@{ii} }], T@{i}]
    }
    val XHas0: XHas0 = nat.has.NatZero
    def XHas1[T1](t1: T1): XHas1[T1] = new nat.has.NatPositive(nat.has.NatZero, t1)
    @for(i <- 2 to maxItem) {
        def XHas@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }](@for(ii <- 1 to i) { @if(ii > 1) { , } t@{ii}: T@{ii} }): XHas@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }] = new nat.has.NatPositive(tail = XHas@{i - 1}(@for(ii <- 1 to i - 1) { @if(ii > 1) { , } t@{ii}: T@{ii} }) , head = t@{i})
    }
    case class XHasTuple1[T1](_1: T1) extends xio.nat.has.NatPositive[xio.nat.has.NatZero, T1](tail = xio.nat.has.NatZero, head = _1)
    @for(i <- 2 to maxItem) {
        case class XHasTuple@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }](@for(ii <- 1 to i) { @if(ii > 1) { , } _@{ii}: T@{ii} }) extends
        nat.has.NatPositive[XHas@{i - 1}[@for(ii <- 1 to i - 1) { @if(ii > 1) { , } T@{ii} }], T@{i}](tail =
        XHasTuple@{i - 1}(@for(ii <- 1 to i - 1) { @if(ii > 1) { , } _@{ii} }), head = _@{i})

        object XHasTuple@{i} {
            def fromTuple[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }](i: (@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} })):
            XHasTuple@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }] =
            XHasTuple@{i}(@for(ii <- 1 to i) { @if(ii > 1) { , } _@{ii} = i._@{ii} })
        }

        object XHasToTuple@{i} {
            def apply[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }](n: XHas@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }]): XHasTuple@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } T@{ii} }] =
                XHasTuple@{i}(@for(ii <- 1 to i) { @if(ii > 1) { , } _@{ii} = n @for(iii <- 1 to i - ii) { .tail } .head })
        }
    }

}
