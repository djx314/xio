package xio.helper
object XIOErrorHelperInstance3 {
  trait MatchAll1Apply1[P, E1, Input, Out] {
    def input1[Out1 <: Out, Input1, T1](e1: E1 => T1)(implicit con1: xio.helper.AllToZIO[T1, Input1, P, Out1]): zio.ZIO[Input with Input1, P, Out]
  }
  class MatchAll1Apply1Impl[P, E1, Input, Out](val xioInstance: xio.XIO[Input, xio.XError1[E1], Out]) extends MatchAll1Apply1[P, E1, Input, Out] {
    def input1[Out1 <: Out, Input1, T1](e1: E1 => T1)(implicit con1: xio.helper.AllToZIO[T1, Input1, P, Out1]): zio.ZIO[Input with Input1, P, Out] =
      xioInstance.catchAll(ii => XIOErrorHelperInstance4.errorCompat1(e1.andThen(con1.input), ii))
  }
  trait MatchAll1Apply2[P, E1, E2, Input, Out] {
    def input2[Out1 <: Out, Input1, T1, Out2 <: Out, Input2, T2](e1: E1 => T1, e2: E2 => T2)(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2]
    ): zio.ZIO[Input with Input1 with Input2, P, Out]
  }
  class MatchAll1Apply2Impl[P, E1, E2, Input, Out](val xioInstance: xio.XIO[Input, xio.XError2[E1, E2], Out]) extends MatchAll1Apply2[P, E1, E2, Input, Out] {
    def input2[Out1 <: Out, Input1, T1, Out2 <: Out, Input2, T2](e1: E1 => T1, e2: E2 => T2)(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2]
    ): zio.ZIO[Input with Input1 with Input2, P, Out] =
      xioInstance.catchAll(ii => XIOErrorHelperInstance4.errorCompat2(e1.andThen(con1.input), e2.andThen(con2.input), ii))
  }
  trait MatchAll1Apply3[P, E1, E2, E3, Input, Out] {
    def input3[Out1 <: Out, Input1, T1, Out2 <: Out, Input2, T2, Out3 <: Out, Input3, T3](e1: E1 => T1, e2: E2 => T2, e3: E3 => T3)(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3]
    ): zio.ZIO[Input with Input1 with Input2 with Input3, P, Out]
  }
  class MatchAll1Apply3Impl[P, E1, E2, E3, Input, Out](val xioInstance: xio.XIO[Input, xio.XError3[E1, E2, E3], Out]) extends MatchAll1Apply3[P, E1, E2, E3, Input, Out] {
    def input3[Out1 <: Out, Input1, T1, Out2 <: Out, Input2, T2, Out3 <: Out, Input3, T3](e1: E1 => T1, e2: E2 => T2, e3: E3 => T3)(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3]
    ): zio.ZIO[Input with Input1 with Input2 with Input3, P, Out] =
      xioInstance.catchAll(ii => XIOErrorHelperInstance4.errorCompat3(e1.andThen(con1.input), e2.andThen(con2.input), e3.andThen(con3.input), ii))
  }
  trait MatchAll1Apply4[P, E1, E2, E3, E4, Input, Out] {
    def input4[Out1 <: Out, Input1, T1, Out2 <: Out, Input2, T2, Out3 <: Out, Input3, T3, Out4 <: Out, Input4, T4](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4, P, Out]
  }
  class MatchAll1Apply4Impl[P, E1, E2, E3, E4, Input, Out](val xioInstance: xio.XIO[Input, xio.XError4[E1, E2, E3, E4], Out])
      extends MatchAll1Apply4[P, E1, E2, E3, E4, Input, Out] {
    def input4[Out1 <: Out, Input1, T1, Out2 <: Out, Input2, T2, Out3 <: Out, Input3, T3, Out4 <: Out, Input4, T4](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4, P, Out] =
      xioInstance.catchAll(ii => XIOErrorHelperInstance4.errorCompat4(e1.andThen(con1.input), e2.andThen(con2.input), e3.andThen(con3.input), e4.andThen(con4.input), ii))
  }
  trait MatchAll1Apply5[P, E1, E2, E3, E4, E5, Input, Out] {
    def input5[Out1 <: Out, Input1, T1, Out2 <: Out, Input2, T2, Out3 <: Out, Input3, T3, Out4 <: Out, Input4, T4, Out5 <: Out, Input5, T5](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5, P, Out]
  }
  class MatchAll1Apply5Impl[P, E1, E2, E3, E4, E5, Input, Out](val xioInstance: xio.XIO[Input, xio.XError5[E1, E2, E3, E4, E5], Out])
      extends MatchAll1Apply5[P, E1, E2, E3, E4, E5, Input, Out] {
    def input5[Out1 <: Out, Input1, T1, Out2 <: Out, Input2, T2, Out3 <: Out, Input3, T3, Out4 <: Out, Input4, T4, Out5 <: Out, Input5, T5](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5, P, Out] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat5(e1.andThen(con1.input), e2.andThen(con2.input), e3.andThen(con3.input), e4.andThen(con4.input), e5.andThen(con5.input), ii)
      )
  }
  trait MatchAll1Apply6[P, E1, E2, E3, E4, E5, E6, Input, Out] {
    def input6[Out1 <: Out, Input1, T1, Out2 <: Out, Input2, T2, Out3 <: Out, Input3, T3, Out4 <: Out, Input4, T4, Out5 <: Out, Input5, T5, Out6 <: Out, Input6, T6](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6, P, Out]
  }
  class MatchAll1Apply6Impl[P, E1, E2, E3, E4, E5, E6, Input, Out](val xioInstance: xio.XIO[Input, xio.XError6[E1, E2, E3, E4, E5, E6], Out])
      extends MatchAll1Apply6[P, E1, E2, E3, E4, E5, E6, Input, Out] {
    def input6[Out1 <: Out, Input1, T1, Out2 <: Out, Input2, T2, Out3 <: Out, Input3, T3, Out4 <: Out, Input4, T4, Out5 <: Out, Input5, T5, Out6 <: Out, Input6, T6](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6, P, Out] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat6(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          ii
        )
      )
  }
  trait MatchAll1Apply7[P, E1, E2, E3, E4, E5, E6, E7, Input, Out] {
    def input7[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7
    ](e1: E1 => T1, e2: E2 => T2, e3: E3 => T3, e4: E4 => T4, e5: E5 => T5, e6: E6 => T6, e7: E7 => T7)(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7, P, Out]
  }
  class MatchAll1Apply7Impl[P, E1, E2, E3, E4, E5, E6, E7, Input, Out](val xioInstance: xio.XIO[Input, xio.XError7[E1, E2, E3, E4, E5, E6, E7], Out])
      extends MatchAll1Apply7[P, E1, E2, E3, E4, E5, E6, E7, Input, Out] {
    def input7[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7
    ](e1: E1 => T1, e2: E2 => T2, e3: E3 => T3, e4: E4 => T4, e5: E5 => T5, e6: E6 => T6, e7: E7 => T7)(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7, P, Out] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat7(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          ii
        )
      )
  }
  trait MatchAll1Apply8[P, E1, E2, E3, E4, E5, E6, E7, E8, Input, Out] {
    def input8[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8
    ](e1: E1 => T1, e2: E2 => T2, e3: E3 => T3, e4: E4 => T4, e5: E5 => T5, e6: E6 => T6, e7: E7 => T7, e8: E8 => T8)(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8, P, Out]
  }
  class MatchAll1Apply8Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, Input, Out](val xioInstance: xio.XIO[Input, xio.XError8[E1, E2, E3, E4, E5, E6, E7, E8], Out])
      extends MatchAll1Apply8[P, E1, E2, E3, E4, E5, E6, E7, E8, Input, Out] {
    def input8[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8
    ](e1: E1 => T1, e2: E2 => T2, e3: E3 => T3, e4: E4 => T4, e5: E5 => T5, e6: E6 => T6, e7: E7 => T7, e8: E8 => T8)(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8, P, Out] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat8(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          ii
        )
      )
  }
  trait MatchAll1Apply9[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, Input, Out] {
    def input9[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9
    ](e1: E1 => T1, e2: E2 => T2, e3: E3 => T3, e4: E4 => T4, e5: E5 => T5, e6: E6 => T6, e7: E7 => T7, e8: E8 => T8, e9: E9 => T9)(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9, P, Out]
  }
  class MatchAll1Apply9Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, Input, Out](val xioInstance: xio.XIO[Input, xio.XError9[E1, E2, E3, E4, E5, E6, E7, E8, E9], Out])
      extends MatchAll1Apply9[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, Input, Out] {
    def input9[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9
    ](e1: E1 => T1, e2: E2 => T2, e3: E3 => T3, e4: E4 => T4, e5: E5 => T5, e6: E6 => T6, e7: E7 => T7, e8: E8 => T8, e9: E9 => T9)(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9, P, Out] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat9(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          ii
        )
      )
  }
  trait MatchAll1Apply10[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, Input, Out] {
    def input10[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10
    ](e1: E1 => T1, e2: E2 => T2, e3: E3 => T3, e4: E4 => T4, e5: E5 => T5, e6: E6 => T6, e7: E7 => T7, e8: E8 => T8, e9: E9 => T9, e10: E10 => T10)(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10, P, Out]
  }
  class MatchAll1Apply10Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, Input, Out](
    val xioInstance: xio.XIO[Input, xio.XError10[E1, E2, E3, E4, E5, E6, E7, E8, E9, E10], Out]
  ) extends MatchAll1Apply10[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, Input, Out] {
    def input10[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10
    ](e1: E1 => T1, e2: E2 => T2, e3: E3 => T3, e4: E4 => T4, e5: E5 => T5, e6: E6 => T6, e7: E7 => T7, e8: E8 => T8, e9: E9 => T9, e10: E10 => T10)(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10, P, Out] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat10(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          e10.andThen(con10.input),
          ii
        )
      )
  }
  trait MatchAll1Apply11[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, Input, Out] {
    def input11[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11
    ](e1: E1 => T1, e2: E2 => T2, e3: E3 => T3, e4: E4 => T4, e5: E5 => T5, e6: E6 => T6, e7: E7 => T7, e8: E8 => T8, e9: E9 => T9, e10: E10 => T10, e11: E11 => T11)(
      implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11, P, Out]
  }
  class MatchAll1Apply11Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, Input, Out](
    val xioInstance: xio.XIO[Input, xio.XError11[E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11], Out]
  ) extends MatchAll1Apply11[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, Input, Out] {
    def input11[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11
    ](e1: E1 => T1, e2: E2 => T2, e3: E3 => T3, e4: E4 => T4, e5: E5 => T5, e6: E6 => T6, e7: E7 => T7, e8: E8 => T8, e9: E9 => T9, e10: E10 => T10, e11: E11 => T11)(
      implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11]
    ): zio.ZIO[Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11, P, Out] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat11(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          e10.andThen(con10.input),
          e11.andThen(con11.input),
          ii
        )
      )
  }
  trait MatchAll1Apply12[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, Input, Out] {
    def input12[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12,
      P,
      Out
    ]
  }
  class MatchAll1Apply12Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, Input, Out](
    val xioInstance: xio.XIO[Input, xio.XError12[E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12], Out]
  ) extends MatchAll1Apply12[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, Input, Out] {
    def input12[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12,
      P,
      Out
    ] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat12(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          e10.andThen(con10.input),
          e11.andThen(con11.input),
          e12.andThen(con12.input),
          ii
        )
      )
  }
  trait MatchAll1Apply13[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, Input, Out] {
    def input13[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13,
      P,
      Out
    ]
  }
  class MatchAll1Apply13Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, Input, Out](
    val xioInstance: xio.XIO[Input, xio.XError13[E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13], Out]
  ) extends MatchAll1Apply13[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, Input, Out] {
    def input13[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13,
      P,
      Out
    ] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat13(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          e10.andThen(con10.input),
          e11.andThen(con11.input),
          e12.andThen(con12.input),
          e13.andThen(con13.input),
          ii
        )
      )
  }
  trait MatchAll1Apply14[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, Input, Out] {
    def input14[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14,
      P,
      Out
    ]
  }
  class MatchAll1Apply14Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, Input, Out](
    val xioInstance: xio.XIO[Input, xio.XError14[E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14], Out]
  ) extends MatchAll1Apply14[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, Input, Out] {
    def input14[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14,
      P,
      Out
    ] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat14(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          e10.andThen(con10.input),
          e11.andThen(con11.input),
          e12.andThen(con12.input),
          e13.andThen(con13.input),
          e14.andThen(con14.input),
          ii
        )
      )
  }
  trait MatchAll1Apply15[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, Input, Out] {
    def input15[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15,
      P,
      Out
    ]
  }
  class MatchAll1Apply15Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, Input, Out](
    val xioInstance: xio.XIO[Input, xio.XError15[E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15], Out]
  ) extends MatchAll1Apply15[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, Input, Out] {
    def input15[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15,
      P,
      Out
    ] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat15(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          e10.andThen(con10.input),
          e11.andThen(con11.input),
          e12.andThen(con12.input),
          e13.andThen(con13.input),
          e14.andThen(con14.input),
          e15.andThen(con15.input),
          ii
        )
      )
  }
  trait MatchAll1Apply16[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, Input, Out] {
    def input16[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16,
      P,
      Out
    ]
  }
  class MatchAll1Apply16Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, Input, Out](
    val xioInstance: xio.XIO[Input, xio.XError16[E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16], Out]
  ) extends MatchAll1Apply16[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, Input, Out] {
    def input16[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16,
      P,
      Out
    ] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat16(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          e10.andThen(con10.input),
          e11.andThen(con11.input),
          e12.andThen(con12.input),
          e13.andThen(con13.input),
          e14.andThen(con14.input),
          e15.andThen(con15.input),
          e16.andThen(con16.input),
          ii
        )
      )
  }
  trait MatchAll1Apply17[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, Input, Out] {
    def input17[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16,
      Out17 <: Out,
      Input17,
      T17
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16,
      e17: E17 => T17
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16],
      con17: xio.helper.AllToZIO[T17, Input17, P, Out17]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16 with Input17,
      P,
      Out
    ]
  }
  class MatchAll1Apply17Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, Input, Out](
    val xioInstance: xio.XIO[Input, xio.XError17[E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17], Out]
  ) extends MatchAll1Apply17[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, Input, Out] {
    def input17[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16,
      Out17 <: Out,
      Input17,
      T17
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16,
      e17: E17 => T17
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16],
      con17: xio.helper.AllToZIO[T17, Input17, P, Out17]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16 with Input17,
      P,
      Out
    ] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat17(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          e10.andThen(con10.input),
          e11.andThen(con11.input),
          e12.andThen(con12.input),
          e13.andThen(con13.input),
          e14.andThen(con14.input),
          e15.andThen(con15.input),
          e16.andThen(con16.input),
          e17.andThen(con17.input),
          ii
        )
      )
  }
  trait MatchAll1Apply18[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, Input, Out] {
    def input18[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16,
      Out17 <: Out,
      Input17,
      T17,
      Out18 <: Out,
      Input18,
      T18
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16,
      e17: E17 => T17,
      e18: E18 => T18
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16],
      con17: xio.helper.AllToZIO[T17, Input17, P, Out17],
      con18: xio.helper.AllToZIO[T18, Input18, P, Out18]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16 with Input17 with Input18,
      P,
      Out
    ]
  }
  class MatchAll1Apply18Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, Input, Out](
    val xioInstance: xio.XIO[Input, xio.XError18[E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18], Out]
  ) extends MatchAll1Apply18[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, Input, Out] {
    def input18[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16,
      Out17 <: Out,
      Input17,
      T17,
      Out18 <: Out,
      Input18,
      T18
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16,
      e17: E17 => T17,
      e18: E18 => T18
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16],
      con17: xio.helper.AllToZIO[T17, Input17, P, Out17],
      con18: xio.helper.AllToZIO[T18, Input18, P, Out18]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16 with Input17 with Input18,
      P,
      Out
    ] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat18(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          e10.andThen(con10.input),
          e11.andThen(con11.input),
          e12.andThen(con12.input),
          e13.andThen(con13.input),
          e14.andThen(con14.input),
          e15.andThen(con15.input),
          e16.andThen(con16.input),
          e17.andThen(con17.input),
          e18.andThen(con18.input),
          ii
        )
      )
  }
  trait MatchAll1Apply19[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, Input, Out] {
    def input19[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16,
      Out17 <: Out,
      Input17,
      T17,
      Out18 <: Out,
      Input18,
      T18,
      Out19 <: Out,
      Input19,
      T19
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16,
      e17: E17 => T17,
      e18: E18 => T18,
      e19: E19 => T19
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16],
      con17: xio.helper.AllToZIO[T17, Input17, P, Out17],
      con18: xio.helper.AllToZIO[T18, Input18, P, Out18],
      con19: xio.helper.AllToZIO[T19, Input19, P, Out19]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16 with Input17 with Input18 with Input19,
      P,
      Out
    ]
  }
  class MatchAll1Apply19Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, Input, Out](
    val xioInstance: xio.XIO[Input, xio.XError19[E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19], Out]
  ) extends MatchAll1Apply19[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, Input, Out] {
    def input19[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16,
      Out17 <: Out,
      Input17,
      T17,
      Out18 <: Out,
      Input18,
      T18,
      Out19 <: Out,
      Input19,
      T19
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16,
      e17: E17 => T17,
      e18: E18 => T18,
      e19: E19 => T19
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16],
      con17: xio.helper.AllToZIO[T17, Input17, P, Out17],
      con18: xio.helper.AllToZIO[T18, Input18, P, Out18],
      con19: xio.helper.AllToZIO[T19, Input19, P, Out19]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16 with Input17 with Input18 with Input19,
      P,
      Out
    ] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat19(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          e10.andThen(con10.input),
          e11.andThen(con11.input),
          e12.andThen(con12.input),
          e13.andThen(con13.input),
          e14.andThen(con14.input),
          e15.andThen(con15.input),
          e16.andThen(con16.input),
          e17.andThen(con17.input),
          e18.andThen(con18.input),
          e19.andThen(con19.input),
          ii
        )
      )
  }
  trait MatchAll1Apply20[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, Input, Out] {
    def input20[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16,
      Out17 <: Out,
      Input17,
      T17,
      Out18 <: Out,
      Input18,
      T18,
      Out19 <: Out,
      Input19,
      T19,
      Out20 <: Out,
      Input20,
      T20
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16,
      e17: E17 => T17,
      e18: E18 => T18,
      e19: E19 => T19,
      e20: E20 => T20
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16],
      con17: xio.helper.AllToZIO[T17, Input17, P, Out17],
      con18: xio.helper.AllToZIO[T18, Input18, P, Out18],
      con19: xio.helper.AllToZIO[T19, Input19, P, Out19],
      con20: xio.helper.AllToZIO[T20, Input20, P, Out20]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16 with Input17 with Input18 with Input19 with Input20,
      P,
      Out
    ]
  }
  class MatchAll1Apply20Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, Input, Out](
    val xioInstance: xio.XIO[Input, xio.XError20[E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20], Out]
  ) extends MatchAll1Apply20[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, Input, Out] {
    def input20[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16,
      Out17 <: Out,
      Input17,
      T17,
      Out18 <: Out,
      Input18,
      T18,
      Out19 <: Out,
      Input19,
      T19,
      Out20 <: Out,
      Input20,
      T20
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16,
      e17: E17 => T17,
      e18: E18 => T18,
      e19: E19 => T19,
      e20: E20 => T20
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16],
      con17: xio.helper.AllToZIO[T17, Input17, P, Out17],
      con18: xio.helper.AllToZIO[T18, Input18, P, Out18],
      con19: xio.helper.AllToZIO[T19, Input19, P, Out19],
      con20: xio.helper.AllToZIO[T20, Input20, P, Out20]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16 with Input17 with Input18 with Input19 with Input20,
      P,
      Out
    ] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat20(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          e10.andThen(con10.input),
          e11.andThen(con11.input),
          e12.andThen(con12.input),
          e13.andThen(con13.input),
          e14.andThen(con14.input),
          e15.andThen(con15.input),
          e16.andThen(con16.input),
          e17.andThen(con17.input),
          e18.andThen(con18.input),
          e19.andThen(con19.input),
          e20.andThen(con20.input),
          ii
        )
      )
  }
  trait MatchAll1Apply21[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, Input, Out] {
    def input21[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16,
      Out17 <: Out,
      Input17,
      T17,
      Out18 <: Out,
      Input18,
      T18,
      Out19 <: Out,
      Input19,
      T19,
      Out20 <: Out,
      Input20,
      T20,
      Out21 <: Out,
      Input21,
      T21
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16,
      e17: E17 => T17,
      e18: E18 => T18,
      e19: E19 => T19,
      e20: E20 => T20,
      e21: E21 => T21
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16],
      con17: xio.helper.AllToZIO[T17, Input17, P, Out17],
      con18: xio.helper.AllToZIO[T18, Input18, P, Out18],
      con19: xio.helper.AllToZIO[T19, Input19, P, Out19],
      con20: xio.helper.AllToZIO[T20, Input20, P, Out20],
      con21: xio.helper.AllToZIO[T21, Input21, P, Out21]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16 with Input17 with Input18 with Input19 with Input20 with Input21,
      P,
      Out
    ]
  }
  class MatchAll1Apply21Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, Input, Out](
    val xioInstance: xio.XIO[Input, xio.XError21[E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21], Out]
  ) extends MatchAll1Apply21[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, Input, Out] {
    def input21[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16,
      Out17 <: Out,
      Input17,
      T17,
      Out18 <: Out,
      Input18,
      T18,
      Out19 <: Out,
      Input19,
      T19,
      Out20 <: Out,
      Input20,
      T20,
      Out21 <: Out,
      Input21,
      T21
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16,
      e17: E17 => T17,
      e18: E18 => T18,
      e19: E19 => T19,
      e20: E20 => T20,
      e21: E21 => T21
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16],
      con17: xio.helper.AllToZIO[T17, Input17, P, Out17],
      con18: xio.helper.AllToZIO[T18, Input18, P, Out18],
      con19: xio.helper.AllToZIO[T19, Input19, P, Out19],
      con20: xio.helper.AllToZIO[T20, Input20, P, Out20],
      con21: xio.helper.AllToZIO[T21, Input21, P, Out21]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16 with Input17 with Input18 with Input19 with Input20 with Input21,
      P,
      Out
    ] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat21(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          e10.andThen(con10.input),
          e11.andThen(con11.input),
          e12.andThen(con12.input),
          e13.andThen(con13.input),
          e14.andThen(con14.input),
          e15.andThen(con15.input),
          e16.andThen(con16.input),
          e17.andThen(con17.input),
          e18.andThen(con18.input),
          e19.andThen(con19.input),
          e20.andThen(con20.input),
          e21.andThen(con21.input),
          ii
        )
      )
  }
  trait MatchAll1Apply22[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, Input, Out] {
    def input22[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16,
      Out17 <: Out,
      Input17,
      T17,
      Out18 <: Out,
      Input18,
      T18,
      Out19 <: Out,
      Input19,
      T19,
      Out20 <: Out,
      Input20,
      T20,
      Out21 <: Out,
      Input21,
      T21,
      Out22 <: Out,
      Input22,
      T22
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16,
      e17: E17 => T17,
      e18: E18 => T18,
      e19: E19 => T19,
      e20: E20 => T20,
      e21: E21 => T21,
      e22: E22 => T22
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16],
      con17: xio.helper.AllToZIO[T17, Input17, P, Out17],
      con18: xio.helper.AllToZIO[T18, Input18, P, Out18],
      con19: xio.helper.AllToZIO[T19, Input19, P, Out19],
      con20: xio.helper.AllToZIO[T20, Input20, P, Out20],
      con21: xio.helper.AllToZIO[T21, Input21, P, Out21],
      con22: xio.helper.AllToZIO[T22, Input22, P, Out22]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16 with Input17 with Input18 with Input19 with Input20 with Input21 with Input22,
      P,
      Out
    ]
  }
  class MatchAll1Apply22Impl[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, Input, Out](
    val xioInstance: xio.XIO[Input, xio.XError22[E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22], Out]
  ) extends MatchAll1Apply22[P, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, Input, Out] {
    def input22[
      Out1 <: Out,
      Input1,
      T1,
      Out2 <: Out,
      Input2,
      T2,
      Out3 <: Out,
      Input3,
      T3,
      Out4 <: Out,
      Input4,
      T4,
      Out5 <: Out,
      Input5,
      T5,
      Out6 <: Out,
      Input6,
      T6,
      Out7 <: Out,
      Input7,
      T7,
      Out8 <: Out,
      Input8,
      T8,
      Out9 <: Out,
      Input9,
      T9,
      Out10 <: Out,
      Input10,
      T10,
      Out11 <: Out,
      Input11,
      T11,
      Out12 <: Out,
      Input12,
      T12,
      Out13 <: Out,
      Input13,
      T13,
      Out14 <: Out,
      Input14,
      T14,
      Out15 <: Out,
      Input15,
      T15,
      Out16 <: Out,
      Input16,
      T16,
      Out17 <: Out,
      Input17,
      T17,
      Out18 <: Out,
      Input18,
      T18,
      Out19 <: Out,
      Input19,
      T19,
      Out20 <: Out,
      Input20,
      T20,
      Out21 <: Out,
      Input21,
      T21,
      Out22 <: Out,
      Input22,
      T22
    ](
      e1: E1 => T1,
      e2: E2 => T2,
      e3: E3 => T3,
      e4: E4 => T4,
      e5: E5 => T5,
      e6: E6 => T6,
      e7: E7 => T7,
      e8: E8 => T8,
      e9: E9 => T9,
      e10: E10 => T10,
      e11: E11 => T11,
      e12: E12 => T12,
      e13: E13 => T13,
      e14: E14 => T14,
      e15: E15 => T15,
      e16: E16 => T16,
      e17: E17 => T17,
      e18: E18 => T18,
      e19: E19 => T19,
      e20: E20 => T20,
      e21: E21 => T21,
      e22: E22 => T22
    )(implicit
      con1: xio.helper.AllToZIO[T1, Input1, P, Out1],
      con2: xio.helper.AllToZIO[T2, Input2, P, Out2],
      con3: xio.helper.AllToZIO[T3, Input3, P, Out3],
      con4: xio.helper.AllToZIO[T4, Input4, P, Out4],
      con5: xio.helper.AllToZIO[T5, Input5, P, Out5],
      con6: xio.helper.AllToZIO[T6, Input6, P, Out6],
      con7: xio.helper.AllToZIO[T7, Input7, P, Out7],
      con8: xio.helper.AllToZIO[T8, Input8, P, Out8],
      con9: xio.helper.AllToZIO[T9, Input9, P, Out9],
      con10: xio.helper.AllToZIO[T10, Input10, P, Out10],
      con11: xio.helper.AllToZIO[T11, Input11, P, Out11],
      con12: xio.helper.AllToZIO[T12, Input12, P, Out12],
      con13: xio.helper.AllToZIO[T13, Input13, P, Out13],
      con14: xio.helper.AllToZIO[T14, Input14, P, Out14],
      con15: xio.helper.AllToZIO[T15, Input15, P, Out15],
      con16: xio.helper.AllToZIO[T16, Input16, P, Out16],
      con17: xio.helper.AllToZIO[T17, Input17, P, Out17],
      con18: xio.helper.AllToZIO[T18, Input18, P, Out18],
      con19: xio.helper.AllToZIO[T19, Input19, P, Out19],
      con20: xio.helper.AllToZIO[T20, Input20, P, Out20],
      con21: xio.helper.AllToZIO[T21, Input21, P, Out21],
      con22: xio.helper.AllToZIO[T22, Input22, P, Out22]
    ): zio.ZIO[
      Input with Input1 with Input2 with Input3 with Input4 with Input5 with Input6 with Input7 with Input8 with Input9 with Input10 with Input11 with Input12 with Input13 with Input14 with Input15 with Input16 with Input17 with Input18 with Input19 with Input20 with Input21 with Input22,
      P,
      Out
    ] =
      xioInstance.catchAll(ii =>
        XIOErrorHelperInstance4.errorCompat22(
          e1.andThen(con1.input),
          e2.andThen(con2.input),
          e3.andThen(con3.input),
          e4.andThen(con4.input),
          e5.andThen(con5.input),
          e6.andThen(con6.input),
          e7.andThen(con7.input),
          e8.andThen(con8.input),
          e9.andThen(con9.input),
          e10.andThen(con10.input),
          e11.andThen(con11.input),
          e12.andThen(con12.input),
          e13.andThen(con13.input),
          e14.andThen(con14.input),
          e15.andThen(con15.input),
          e16.andThen(con16.input),
          e17.andThen(con17.input),
          e18.andThen(con18.input),
          e19.andThen(con19.input),
          e20.andThen(con20.input),
          e21.andThen(con21.input),
          e22.andThen(con22.input),
          ii
        )
      )
  }
}
